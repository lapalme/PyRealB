# examples adapted from jsRealB2.js
# some "hard" expressions used for debugging "corner cases"

import datetime
from pyrealb import *
from test import test

def exemples_fr():
    loadFr()
    addToLexicon({"John":{"N":{"g":"m","tab":"n4"}}})
    addToLexicon({"Mary":{"N":{"g":"f","tab":"n16"}}})
    pomme = NP(D("le"),N("pomme"));
    gars = NP(D("le"),N("garçon").n("p"));

    exemples_fr=[
        [N("chat"),
            "chat"],
        [Pro("moi").c("acc"),
            "me"],
        [Pro("moi").tn(""),
            "moi"],
        [NP(D("le"),N("chat")),
            "le chat"],
        [S(NP(D('le'),N('chat').n("p"))),
            "Les chats. "],
        [V("aller").t("ps").pe(2).n("p"),
            "allâtes"],
        [V("aller").t("pc").pe(3).n("s"),
            "est allé"],
        [VP(V("aller").t("f").pe(1).n("p")).typ({"neg":True}),
            "n'irons pas"],
        [VP(V("aller").t("pq").pe(2).n("s")).typ({"neg":True}),
            "n'étais pas allé"],
        [S(NP(D("le"),N("chat").g("f").n("p")),
          VP(V("manger"),
             NP(D("le"),N("souris")))),
            "Les chattes mangent la souris. "],
        [S(NP(D("le"),N("chat").g("f").n("p")),
          VP(V("manger"),
             NP(D("le"),N("souris")))).typ({"pas":True}),
            "La souris est mangée par les chattes. "],
        [S(NP(D('le'),Q("super"),
             N('chat').g("f").n("p").tag("b").tag("i")),
          VP(V('dévorer').t('pc'),
             NP(D('le'),
                N('souris'),
                A("gris"),"Wow!").tag("a",{"href":"http:#wikipedia.org/cat","target":"_blank"}))
            ).typ({"neg":True}),
            'Les super <i><b>chattes</b></i> n\'ont pas dévoré <a href="http:#wikipedia.org/cat" target="_blank">la souris grise Wow!</a>'],
        [
            S(NP(D('le'),
                N('souris').n("p")),
          VP(V('être'),
                AP(A('gris')))).typ({"neg":True}),
            "Les souris ne sont pas grises. "],
        [S(Pro("je").n("p").pe(2),
          VP(V("avoir").t("cp"),
             NP(NO(2),A("beau"),N("ami").g("f")))).typ({"neg":"plus"}),
            "Vous n'auriez plus eu 2 belles amies. "],
        [S(NP(N("John")),
          VP(V("évanouir").aux("êt").t("pc")),
            PP(P("à"),DT("1979-05-21T10:05:00"))).typ({"neg":True}),
            "John ne s'est pas évanoui au lundi 21 mai 1979 à 10 h 5 min 0 s. "],
        [S(CP(C("et"),NP(N("John")),NP(N("Mary"))),
          VP(V("évanouir").t("pc")),
             PP(P("à"),DT("1979-05-21T10:05:00"))).typ({"neg":True}),
            "John et Mary ne se sont pas évanouis au lundi 21 mai 1979 à 10 h 5 min 0 s. "],
        [S(VP().add(V("aimer")).add(pomme)).add(gars,0),
            "Les garçons aiment la pomme. "],
        [S(CP(C("et"),NP(D("le"),N("fruit"))).add(pomme).add(gars),
                  VP(V("venir").t("pc"),
                     Adv("hier"))),
            "Le fruit, la pomme et les garçons sont venus hier. "],
        [S(CP(C("et"),NP(D("le"),N("orange"))).add(pomme),
                      VP(V("arriver").t("pc"),
                         Adv("hier"))),
            "L'orange et la pomme sont arrivées hier. "],
        [S(Pro("je"),
                  VP(V("manger").t("pc"),
                     NP(D("le"),N("pomme")))),
            "Il a mangé la pomme. "],
        [S(Pro("je"),
                  VP(V("manger").t("pc"),
                     NP(D("le"),N("pomme")).tag("i").pro())),
            "Il <i>l'</i> a mangée. "],
        [S(NP(D("le"),N("pomme").tag("i"),
                     SP(Pro("qui"),
                        VP(V("manger").aux("êt").t("pc"))))),
            "La <i>pomme</i> qui est mangée. "],
        [NP(D("le"),N("pomme").tag("i"),
                     SP(Pro("que"),
                        Pro("je"),
                        VP(V("manger").t("pc")))),
            "la <i>pomme</i> qu'il a mangée"],
        [S(NP(D("le"),N("pomme").tag("i"),
                         SP(Pro("que"),
                            Pro("je"),
                            VP(V("manger").t("pc")))).pro()),
            "Elle. "],
        [S(NP(D("le"),N("enfant").n("p")),VP(V("manger"),NP(D("le"),N("gâteau")))).typ({"pas":True}),
            "Le gâteau est mangé par les enfants. "],
        [S(Pro("je").pe(1).n("p"), VP(V("agir").t("pc"), AdvP(Adv("conformément"),
                          PP(P("à"), NP(D("le"), N("loi")))))).typ({"neg":True}),
            "Nous n'avons pas agi conformément à la loi. "],
        [S(NP(D('le'),
             N('souris'),
             SP(Pro('que'),
                 NP(D('le'),
                     N('chat').n("p")),
                 VP(V('manger').t('pc')))),
          VP(V('être'),
             AP(A('gris')))),
            "La souris que les chats ont mangée est grise. "],
        [DT(),
            None],
        [DT(datetime.datetime.today()).nat(False),
            None],
        [DT(datetime.datetime.today()).dOpt({"rtime":True}),
            None],
        [NO(1.847584).dOpt({"mprecision": 0}),
            "2"],
        [NO(1.847584).dOpt({"mprecision": 4}),
            "1,8476"],
        [NO(1.847584).dOpt({"raw":False}),
            "1,85"],
        [NO(1.847584).dOpt({"raw":True}),
            "1.847584"],
        [NO(125).dOpt({"nat":True}),
            "cent vingt-cinq"],
        [NO(10).dOpt({"ord":True}),
            "dixième"],
        [NP(NO(0), N("avion")),
            "0 avion"],
        [NP(NO(2), N("avion")),
             "2 avions"],
        [NP(NO(1.5).dOpt({"mprecision":1}), N("livre")),
            "1,5 livre"],
        [NP(NO(2.4).dOpt({"mprecision":1}), N("livre")),
            "2,4 livres"],
        [NP(NO(2), A("rouge"),N("avion")),
            "2 avions rouges"],
        [N("pomme").g("w"),
            "pomme"],
        [S(Pro("lui").c("nom"),
          VP(V("donner").t("pc"),
             NP(D("un"),N("pomme")).pro(),
             PP(P("à"),NP(D("le"),A("jeune"),N("femme"))
             ))),
             "Il l'a donnée à la jeune femme. "],
        [S(Pro("lui").c("nom"),
          VP(V("donner").t("pc"),
             NP(D("un"),N("pomme")).pro(),
             PP(P("à"),NP(D("le"),A("jeune"),N("femme"))).pro())),
             "Il la lui a donnée. "],
        [S(Pro("je").pe(1),
          VP(V("mettre").t("pc"),
             NP(D("le"),N("lettre")),
             PP(P("sur"),NP(D("le"),N("table"))).pro())),
             "J'y ai mis la lettre. "],
        [S(Pro("je").pe(1),
          VP(V("mettre").t("pc"),
             NP(D("le"),N("lettre")).pro(),
             PP(P("sur"),NP(D("le"),N("table"))).pro())).typ({"neg":True}),
             "Je ne l'y ai pas mise. "],
        # exemples du papier "Architecture... "
        # Figure 6
        [S(Pro("lui").c("nom"),
           VP(V("donner").t("pc"),
              NP(D("un"),N("pomme")).pro())),
         "Il l'a donnée. "],
        # Table 1 - 1
        [S(Pro("lui").c("nom"),
           VP(V("donner").t("pc"),
              NP(D("un"),N("pomme")).pro())).typ({"neg":True}),
         "Il ne l'a pas donnée. "],
        # Table 1 - 2
        [S(Pro("lui").c("nom"),
           VP(V("donner").t("pc"),
              NP(D("un"),N("pomme")).pro(),
              PP(P("à"),NP(D("le"),N("fille"))))).typ({"neg":True}),
         "Il ne l'a pas donnée à la fille. "],
        # Table 1 - 3
        [S(Pro("lui").c("nom"),
           VP(V("donner").t("pc"),
              NP(D("un"),N("pomme")).pro(),
              PP(P("à"),NP(D("le"),N("fille"))).pro())).typ({"neg":True}),
         "Il ne la lui a pas donnée. "],
        # Table 1 - 4
        [S(Pro("lui").c("nom"),
           VP(V("donner").t("pc"),
              NP(D("un"),N("pomme")).pro(),
              PP(P("à"),NP(D("le"),N("fille"))).pro())).typ({"neg":True,"pas":True}),
         "Elle ne lui a pas été donnée par lui. "],
        # position des pronoms devant le verbe
        [S(Pro('lui').c("nom"),
           VP(V('donner').t("pc"),
              NP(D('un'),N('chat')).pro(),
              Pro("elle").c("dat"))),
         "Il le lui a donné. "],
        # modifications globales de propriétés
        [S(NP(D("le"),N("chat").g("f")),
          VP(V("manger"),
             NP(D("le"),N("souris")))).t("f"),
            "La chatte mangera la souris. "],
        [S(CP(C("et"),
              Pro("elle").tn(""),
              Pro("moi").tn("")),
            VP(V("aller"),
               PP(P("à"),
                  NP(D("le"),N("plage"))))).t("pc"),
         "Elle et moi sommes allés à la plage. "],
        # changement de personne dans le déterminant
        [S(NP(D("notre").pe(2),N("chef")),
           VP(V("aller"))),
         "Votre chef va. "],
        # nouveau type de question "yon" par inversion du sujet
        [S(NP(D('le'),  # 54
              N('chat')),
           VP(V('manger'),
              NP(D('le'),
                 N('souris')))).typ({"int":"yon"}),
         "Le chat mange-t-il la souris? "],
        [S(NP(D('le'), # 55
              N('chat')),
           VP(V('manger'),
              NP(D('le'),
                 N('souris')))).typ({"int":"yon","neg":True}),
         "Le chat ne mange-t-il pas la souris? "],
        [S(NP(D('le'), # 56
              N('chat')),
           VP(V('manger'),
              NP(D('le'),
                 N('souris')))).typ({"int":"yon","pas":True}),
         "La souris est-elle mangée par le chat? "],
         [S(Pro("je"),  # 57
            VP(V('manger'),
               NP(D('le'),
                  N('fromage')))).typ({"int":"yon"}),
         "Mange-t-il le fromage? "],
         [S(Pro("je"),  # 58
            VP(V('manger').t("pc"),
               NP(D('le'),
                  N('fromage')))).typ({"int":"yon"}),
         "A-t-il mangé le fromage? "],
         [S(Pro("je"),  # 59
            VP(V('manger').t("pc"),
               NP(D('le'),
                  N('fromage')))).typ({"neg":True,"int":"yon"}),
         "N'a-t-il pas mangé le fromage? "],
        [S(Pro("je"),  # 60
            VP(V('manger').t("pc"),
               NP(D('le'),
                  N('fromage')))).typ({"neg":True,"int":"tag"}),
         "Il n'a pas mangé le fromage, n'est-ce pas? "],
         # adverb position
         [S(Pro('je').pe(2),  # 60
            VP(V('travailler').t("pc"),
               Adv('bien'))).typ({"mod":"nece"}),
         "Tu as dû bien travailler. "],
         [S(Pro('je'),          # 61
           VP(V('aller').t("pc"),
              Adv('hier'),
              PP(P('à'),
                 NP(D('le'),
                    N('maison'))))).typ({"neg":True}),
         "Il n'est pas allé hier à la maison. "],
          [S(Pro('je'),         # 62
             VP(V('aller').t("pc"),
                Adv('souvent'),
                PP(P('à'),
                   NP(D('le'),
                      N('maison'))),
                Adv('sûrement'))).typ({"neg":True}),
          "Il n'est pas souvent allé à la maison sûrement. "],
          [S(Pro('je'),          # 63
            VP(V('aller').t("pc"),
               Adv('souvent').pos("post"),
               PP(P('à'),
                  NP(D('le'),
                     N('maison'))))).typ({"neg":True}),
          "Il n'est pas allé souvent à la maison. "],
          [S(NP(D('le'),         # 64
               N('chat')),
            VP(V('manger'),
               Adv('bien'),
               Adv('souvent'),
               NP(D('le'),
                  N('souris')))).typ({"pas":True}),
          "La souris est bien souvent mangée par le chat. "],
          [S(Pro("tout"),
             VP(V("sembler").t("pa"),
                V("fonctionner").t("bp"))),
           "Tout eut semblé avoir fonctionné. "],
          [S(Pro("lui"),
             VP(V("manger"),
                NP(D("le"), N("fromage")))).typ({"pas": True}),
           "Le fromage est mangé par lui. "],
          [NP(NO(2), N("fille"), CP(C("et"), A("joli"), A("vieux"))),
           "2 filles jolies et vieilles"],
          [NP(CP(C("ou"), NO(2), NO(3)), N("fille"), CP(C("et"), A("jeune"), A("joli"))),
           "2 ou 3 filles jeunes et jolies"],
    ]
    tests = [{}]
    for exp, expected in exemples_fr:
        tests.append({
            "expression": exp,
            "expected": expected,
            "message": f"Phrase complète:  {expected}"
        })
    # add also the dependent version
    for exp, expected in exemples_fr:
        tests.append({
            "expression": exp.clone().toDependent(),
            "expected": expected,
            "message": f"Phrase complète:  {expected}"
        })

    return tests

if __name__ == '__main__':
    test("Phrases en français","fr",exemples_fr,badOnly=False,showExpr=False)
